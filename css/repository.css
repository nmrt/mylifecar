
/*//////////////////////////////////////////////////////////
//
// debuger
//
//////////////////////////////////////////////////////////*/

#debugerWindow td
{
	font-family: "Courier New", Courier, monospace;
	font-size: 12px;
	color: #666;
}
#debugerWindow
{
	height: 200px;
	border: solid 6px red;
	background: white;
	bottom: 0;
	/*z-index: 6669;*/
	overflow-y: auto;
}
#debugerWindow .padding
{
	padding: 26px 13px;
}
#debugerWindowX
{
	font-family: Verdana, Tahoma, Arial, sans-serif;
	font-size: 12px;
	font-weight: bold;
	color: red;
	text-decoration: none;
	right: 6px;
	bottom: 0px;
	/*z-index: 6670;*/
}
#debugerWindowX:hover { text-decoration: none; }@charset "UTF-8";

/* SpryValidationSelect.css - Revision: Spry Preview Release 1.4 */

/* Copyright (c) 2006. Adobe Systems Incorporated. All rights reserved. */

/* These are the classes applied on the messages
 * (required message and invalid state message)
 * which prevent them from being displayed by default.
 */ 
.selectRequiredMsg, .selectInvalidMsg
{
	display: none;
	font-size: 9px;
}

/* These selectors change the way messages look when the widget is in one of the error states (required, invalid).
 * These classes set a default red border and color for the error text.
 * The state class (.selectRequiredState or .selectInvalidState) is applied on the top-level container for the widget,
 * and this way only the specific error message can be shown by setting the display property to "inline".
 */
.selectRequiredState .selectRequiredMsg,
.selectInvalidState .selectInvalidMsg {
	display: inline;
	color: #CC3333;
	border: 1px solid #CC3333;
}
.selectRequiredState div.selectRequiredMsg,
.selectInvalidState div.selectInvalidMsg
{
	display: block;
	margin: 2px 0;
}

/* The next three group selectors control the way the core element (SELECT) looks like when the widget is in one of the states: 
 * focus, required / invalid, valid 
 * There are two selectors for each state, to cover the two main usecases for the widget:
 * - the widget id is placed on the top level container for the SELECT
 * - the widget id is placed on the SELECT element itself (there are no error messages)
 */
 
/* When the widget is in the valid state the SELECT has a green background applied on it. */
.selectValidState select, select.selectValidState {
	background-color: #B8F5B1;
}

/* When the widget is in an invalid state the SELECT has a red background applied on it. */
select.selectRequiredState, .selectRequiredState select,
select.selectInvalidState, .selectInvalidState select {
	background-color: #FF9F9F;
}

/* When the widget has received focus, the SELECT has a yellow background applied on it. */
.selectFocusState select, select.selectFocusState {
	background-color: #FFFFCC;
}
@charset "UTF-8";

/* SpryFormValidation.css - version 0.5 - Spry Pre-Release 1.5 */

/* Copyright (c) 2006. Adobe Systems Incorporated. All rights reserved. */



/* These are the classes applied on the error messages
 * which prevent them from being displayed by default.
 */ 
.textareaRequiredMsg,
.textareaMinCharsMsg,
.textareaMaxCharsMsg,
.textareaValidMsg
{
	display:none;
	font-size: 9px;
}

/* These selectors change the way messages look when the widget is in one of the error states.
 * These classes set a default red border and color for the error text.
 * The state class (e.g. .textareaRequiredState) is applied on the top-level container for the widget,
 * and this way only the specific error message can be shown by setting the display property to "inline".
 */
.textareaRequiredState .textareaRequiredMsg,
.textareaMinCharsState .textareaMinCharsMsg,
.textareaMaxCharsState .textareaMaxCharsMsg
{
	display: inline;
	color: #CC3333;
	border: 1px solid #CC3333;
}
.textareaRequiredState div.textareaRequiredMsg,
.textareaMinCharsState div.textareaMinCharsMsg,
.textareaMaxCharsState div.textareaMaxCharsMsg
{
	display: block;
	margin: 2px 0;
}

/* The next three group selectors control the way the core element (TEXTAREA) looks like when the widget is in one of the states: * focus, required / minChars / maxChars , valid 
 * There are two selectors for each state, to cover the two main usecases for the widget:
 * - the widget id is placed on the top level container for the TEXTAREA
 * - the widget id is placed on the TEXTAREA element itself (there are no error messages)
 */
 
 /* When the widget is in the valid state the TEXTAREA has a green background applied on it. */
.textareaValidState textarea, textarea.textareaValidState {
	background-color:#B8F5B1;
}

/* When the widget is in an invalid state the TEXTAREA has a red background applied on it. */
textarea.textareaRequiredState, .textareaRequiredState textarea, 
textarea.textareaMinCharsState, .textareaMinCharsState textarea, 
textarea.textareaMaxCharsState, .textareaMaxCharsState textarea {
	background-color:#FF9F9F;
}

/* When the widget has received focus, the TEXTAREA has a yellow background applied on it. */
.textareaFocusState textarea, textarea.textareaFocusState {
	background-color:#FFFFCC;
}

/* This class applies only for a short period of time and changes the way the text in the textarea looks like.
 * It applies only when the widget has enforce max chars enabled and the user tries to type some more.
 */
.textareaFlashState textarea, textarea.textareaFlashState{
	color:red !important;
}
/* When the widget has the hint message on, the hint text can be styled differently than the user typed text. */
textarea.textareaHintState, .textareaHintState textarea{
	/* color: red !important;*/
}
@charset "UTF-8";

/* SpryFormValidation.css - Revision: Spry Preview Release 1.4 */

/* Copyright (c) 2006. Adobe Systems Incorporated. All rights reserved. */


/* These are the classes applied on the error messages
 * which prevent them from being displayed by default.
 */ 
.textfieldRequiredMsg, 
.textfieldInvalidFormatMsg, 
.textfieldMinValueMsg,
.textfieldMaxValueMsg,
.textfieldMinCharsMsg,
.textfieldMaxCharsMsg,
.textfieldValidMsg
{
	display: none;
	font-size: 9px;
}

/* These selectors change the way messages look when the widget is in one of the error states.
 * These classes set a default red border and color for the error text.
 * The state class (e.g. .textfieldRequiredState) is applied on the top-level container for the widget,
 * and this way only the specific error message can be shown by setting the display property to "inline".
 */
.textfieldRequiredState .textfieldRequiredMsg, 
.textfieldInvalidFormatState .textfieldInvalidFormatMsg, 
.textfieldMinValueState .textfieldMinValueMsg,
.textfieldMaxValueState .textfieldMaxValueMsg,
.textfieldMinCharsState .textfieldMinCharsMsg,
.textfieldMaxCharsState .textfieldMaxCharsMsg
{
	display: inline;
	color: #CC3333;
	border: 1px solid #CC3333;
}
.textfieldRequiredState div.textfieldRequiredMsg, 
.textfieldInvalidFormatState div.textfieldInvalidFormatMsg, 
.textfieldMinValueState div.textfieldMinValueMsg,
.textfieldMaxValueState div.textfieldMaxValueMsg,
.textfieldMinCharsState div.textfieldMinCharsMsg,
.textfieldMaxCharsState div.textfieldMaxCharsMsg
{
	display: block;
	margin: 2px 0;
}


/* The next three group selectors control the way the core element (INPUT) looks like when the widget is in one of the states: * focus, required / invalid / minValue / maxValue / minChars / maxChars , valid 
 * There are two selectors for each state, to cover the two main usecases for the widget:
 * - the widget id is placed on the top level container for the INPUT
 * - the widget id is placed on the INPUT element itself (there are no error messages)
 */
 
 /* When the widget is in the valid state the INPUT has a green background applied on it. */
.textfieldValidState input, input.textfieldValidState {
	background-color: #B8F5B1;
}

/* When the widget is in an invalid state the INPUT has a red background applied on it. */
input.textfieldRequiredState, .textfieldRequiredState input, 
input.textfieldInvalidFormatState, .textfieldInvalidFormatState input, 
input.textfieldMinValueState, .textfieldMinValueState input, 
input.textfieldMaxValueState, .textfieldMaxValueState input, 
input.textfieldMinCharsState, .textfieldMinCharsState input, 
input.textfieldMaxCharsState, .textfieldMaxCharsState input {
	background-color: #FF9F9F;
}

/* When the widget has received focus, the INPUT has a yellow background applied on it. */
.textfieldFocusState input, input.textfieldFocusState {
	background-color: #FFFFCC;
}

/* This class applies only for a short period of time and changes the way the text in the textbox looks like.
 * It applies only when the widget has character masking enabled and the user tries to type in an invalid character.
 */
.textfieldFlashText input, input.textfieldFlashText{
	color: red !important;
}
@charset "UTF-8";

/* SpryTabbedPanels.css - Revision: Spry Preview Release 1.4 */

/* Copyright (c) 2006. Adobe Systems Incorporated. All rights reserved. */

/* Horizontal Tabbed Panels
 *
 * The default style for a TabbedPanels widget places all tab buttons
 * (left aligned) above the content panel.
 */

/* This is the selector for the main TabbedPanels container. For our
 * default style, this container does not contribute anything visually,
 * but it is responsible for clearing any floats that may cause the tab
 * buttons and content panels to flow/wrap "funny" around floated image/block
 * elements.
 *
 * If you want to constrain the width of the TabbedPanels widget, set a
 * width on the TabbedPanels container. By default, the TabbedPanels widget
 * expands horizontally to fill up available space.
 *
 * The name of the class ("TabbedPanels") used in this selector is not
 * necessary to make the widget function. You can use any class name you
 * want to style the TabbedPanels container.
 */
.TabbedPanels {
	margin: 0px;
	padding: 0px;
	clear: both;
	width: 100%; /* IE Hack to force proper layout when preceded by a paragraph. (hasLayout Bug)*/
}

/* This is the selector for the TabGroup. The TabGroup container houses
 * all of the tab buttons for each tabbed panel in the widget. This container
 * does not contribute anything visually to the look of the widget for our
 * default style.
 *
 * The name of the class ("TabbedPanelsTabGroup") used in this selector is not
 * necessary to make the widget function. You can use any class name you
 * want to style the TabGroup container.
 */
.TabbedPanelsTabGroup {
	margin: 0px;
	padding: 0px;
}

/* This is the selector for the TabbedPanelsTab. This container houses
 * the title for the panel. This is also the tab "button" that the user clicks
 * on to activate the corresponding content panel so that it appears on top
 * of the other tabbed panels contained in the widget.
 *
 * For our default style, each tab is positioned relatively 1 pixel down from
 * where it wold normally render. This allows each tab to overlap the content
 * panel that renders below it. Each tab is rendered with a 1 pixel bottom
 * border that has a color that matches the top border of the current content
 * panel. This gives the appearance that the tab is being drawn behind the
 * content panel.
 *
 * The name of the class ("TabbedPanelsTab") used in this selector is not
 * necessary to make the widget function. You can use any class name you want
 * to style this tab container.
 */
.TabbedPanelsTab {
	position: relative;
	top: 1px;
	float: left;
	padding: 4px 10px;
	margin: 0px 1px 0px 0px;
	font: bold 0.7em sans-serif;
	background-color: #DDD;
	list-style: none;
	border-left: solid 1px #CCC;
	border-bottom: solid 1px #999;
	border-top: solid 1px #999;
	border-right: solid 1px #999;
	-moz-user-select: none;
	-khtml-user-select: none;
	cursor: pointer;
}

/* This selector is an example of how to change the appearnce of a tab button
 * container as the mouse enters it. The class "TabbedPanelsTabHover" is
 * programatically added and removed from the tab element as the mouse enters
 * and exits the container.
 */
.TabbedPanelsTabHover {
	background-color: #CCC;
}

/* This selector is an example of how to change the appearance of a tab button
 * container after the user has clicked on it to activate a content panel.
 * The class "TabbedPanelsTabSelected" is programatically added and removed
 * from the tab element as the user clicks on the tab button containers in
 * the widget.
 *
 * As mentioned above, for our default style, tab buttons are positioned
 * 1 pixel down from where it would normally render. When the tab button is
 * selected, we change its bottom border to match the background color of the
 * content panel so that it looks like the tab is part of the content panel.
 */
.TabbedPanelsTabSelected {
	background-color: #EEE;
	border-bottom: 1px solid #EEE;
}

/* This selector is an example of how to make a link inside of a tab button
 * look like normal text. Users may want to use links inside of a tab button
 * so that when it gets focus, the text *inside* the tab button gets a focus
 * ring around it, instead of the focus ring around the entire tab.
 */
.TabbedPanelsTab a {
	color: black;
	text-decoration: none;
}

/* This is the selector for the ContentGroup. The ContentGroup container houses
 * all of the content panels for each tabbed panel in the widget. For our
 * default style, this container provides the background color and borders that
 * surround the content.
 *
 * The name of the class ("TabbedPanelsContentGroup") used in this selector is
 * not necessary to make the widget function. You can use any class name you
 * want to style the ContentGroup container.
 */
.TabbedPanelsContentGroup {
	clear: both;
	border-left: solid 1px #CCC;
	border-bottom: solid 1px #CCC;
	border-top: solid 1px #999;
	border-right: solid 1px #999;
	background-color: #EEE;
}

/* This is the selector for the Content panel. The Content panel holds the
 * content for a single tabbed panel. For our default style, this container
 * provides some padding, so that the content is not pushed up against the
 * widget borders.
 *
 * The name of the class ("TabbedPanelsContent") used in this selector is
 * not necessary to make the widget function. You can use any class name you
 * want to style the Content container.
 */
.TabbedPanelsContent {
	padding: 4px;
}

/* This selector is an example of how to change the appearnce of the currently
 * active container panel. The class "TabbedPanelsContentVisible" is
 * programatically added and removed from the content element as the panel
 * is activated/deactivated.
 */
.TabbedPanelsContentVisible {
}

/* Vertical Tabbed Panels
 *
 * The following rules override some of the default rules above so that the
 * TabbedPanels widget renders with its tab buttons along the left side of
 * the currently active content panel.
 *
 * With the rules defined below, the only change that will have to be made
 * to switch a horizontal tabbed panels widget to a vertical tabbed panels
 * widget, is to use the "VTabbedPanels" class on the top-level widget
 * container element, instead of "TabbedPanels".
 */

/* This selector floats the TabGroup so that the tab buttons it contains
 * render to the left of the active content panel. A border is drawn around
 * the group container to make it look like a list container.
 */
.VTabbedPanels .TabbedPanelsTabGroup {
	float: left;
	width: 10em;
	height: 20em;
	background-color: #EEE;
	position: relative;
	border-top: solid 1px #999;
	border-right: solid 1px #999;
	border-left: solid 1px #CCC;
	border-bottom: solid 1px #CCC;
}

/* This selector disables the float property that is placed on each tab button
 * by the default TabbedPanelsTab selector rule above. It also draws a bottom
 * border for the tab. The tab button will get its left and right border from
 * the TabGroup, and its top border from the TabGroup or tab button above it.
 */
.VTabbedPanels .TabbedPanelsTab {
	float: none;
	margin: 0px;
	border-top: none;
	border-left: none;
	border-right: none;
}

/* This selector disables the float property that is placed on each tab button
 * by the default TabbedPanelsTab selector rule above. It also draws a bottom
 * border for the tab. The tab button will get its left and right border from
 * the TabGroup, and its top border from the TabGroup or tab button above it.
 */
.VTabbedPanels .TabbedPanelsTabSelected {
	background-color: #EEE;
	border-bottom: solid 1px #999;
}

/* This selector floats the content panels for the widget so that they
 * render to the right of the tabbed buttons.
 */
.VTabbedPanels .TabbedPanelsContentGroup {
	clear: none;
	float: left;
	padding: 0px;
	width: 30em;
	height: 20em;
}

/* Copyright (c) 2006 Yahoo! Inc. All rights reserved. */
/* Container Styles */

.calcontainer {*height:1%;} /* IE */
.calcontainer:after {content:'.';clear:both;display:block;visibility:hidden;height:0;} /* others */

.calbordered {
	float:left;
	padding:5px;
	background-color:#eee;
	border:1px solid #999;
}

.calbordered .title {
	font:73% Arial,Helvetica,sans-serif;
	color:#000;
	font-weight:bold;
	margin-bottom:5px;
	height:auto;
	width:304px;
	position:relative;
}

.title .close-icon {
	position:absolute;
	right:0;
	top:0;
	border:none;
}

.cal2up {
	float:left;
}

.calnavleft {
	/*position:absolute;
	top:0;
	bottom:0;
	height:12px;   
	left:2px;*/
}

.calnavright {
	/*position:absolute;
	top:0;
	bottom:0;
	height:12px;  
	right:2px;*/
}

/* Calendar element styles */

.calendar {
	font:73% Arial,Helvetica,sans-serif;
	text-align:center;
	border-spacing:0;
}

.calcell {
	/*width:1.5em;
	height:1em;*/
	border:1px solid #eee;
	background-color:#FFF;
}

.calcell a {
	color:red;
	text-decoration:none;
	padding: 2px;
}

.calcell.today {
	border:1px solid red !important;
}

.calcell.oom, .calcell.oom:hover {
	cursor:default;
	color:#999;
	background-color:#EEE;
	border:1px solid #eee;
}

.calcell.selected {
	color:#003DB8;
	background-color:#FFF19F;
	border:1px solid #FF9900;
}

.calcell:hover, .calcell.calcellhover {
	cursor:pointer;
	color:#FFF;
	background-color:#FF9900;
	border:1px solid #FF9900;
}

.calcell.calcellhover a, .calcell:hover a {
	color:#FFF;
}

.calcell.restricted {
	text-decoration:line-through;
}

.calcell.previous {
	color:#CCC;
}

.calcell.highlight1 { background-color:#CCFF99; }
.calcell.highlight2 { background-color:#99CCFF; }
.calcell.highlight3 { background-color:#FFCCCC; }
.calcell.highlight4 { background-color:#CCFF99; }


.calhead {
	border:1px solid #E0E0E0;
	vertical-align:middle;
	background-color:#FFF;
}

.calheader {
	/*position:relative;*/
	width:100%;
}

.calheader img {
	border:none;
}

.calweekdaycell {
	color:#666;
	font-weight:normal;
}

.calfoot {
	background-color:#EEE;
}

.calrowhead, .calrowfoot {
	color:#666;
	font-size:9px;
	font-style:italic;
	font-weight:normal;
	width:15px;
}

.calrowhead {
	border-right-width:2px;
}
@charset "utf-8";

.MultiSelect
{
	/*padding: 2px;
	display: inline;*/
	float: left;
}
.MultiSelect .bg { background: #eee; }

/*
//
// input
//
*/
.MultiSelect input
{
	/*border: 2px solid #eee;
	width: 100%;*/
	border: none;
	background: #eee;
	cursor: default;
	text-align: left;
	padding: 0 2px;
}
.MultiSelect input.over,
.MultiSelect input.focus { /*border: 2px solid #666;*/ background: #fff; }
.MultiSelect input.focus { background: #fff; }
.MultiSelect.disabled input { background: #eee; }

/*
//
// options
//
*/
.MultiSelect .options
{
	position: absolute;
	display: none;
	overflow-x: hidden;
	overflow-y: auto;
	background: #eee;
	max-height: 200px;
	border: 1px solid #000;
	z-index: 1; /* IE bug fix */
}
.MultiSelect .option
{
	border: 2px solid #eee;
	background: none;
	font-weight: normal;
	padding: 0;
	margin: 0;
	display: block;
	/*width: 100%;*/
	text-align: left;
	cursor: default;
}
.MultiSelect .option.disabled
{
	background-color: #ddd;
	border-color: #ddd;
}
.MultiSelect .option.over
{
	background-color: #ddd;
	border-color: #666;
}

@charset "utf-8";

.SelectionMenu
{
	margin-bottom: 5px;
}

/*
//
// FontNameSelect, FontSizeSelect
//
*/
.SelectionMenu .FontNameSelect,
.SelectionMenu .FontSizeSelect
{
	position: absolute;
	background-color: white;
	border: 2px solid #eee;
}
.SelectionMenu .FontNameSelect .option,
.SelectionMenu .FontSizeSelect .option
{
	display: block;
	width: 200px;
	color: #666;
	font-size: 14px;
	background-color: white;
	border: none;
	text-align: left;
}

@charset "utf-8";

.BlackVeil
{
	position: absolute;
	left: 0;
	top: 0;
	background-color: black;
	opacity: .5;
	filter: alpha(opacity=50);
}
.BlackVeil,
.BlackVeil td
{
	font-family: Verdana, Arial, Helvetica, sans-serif;
	font-size: 12px;
}

@charset "utf-8";

.window,
.window td
{
	font-family: Verdana, Arial, Helvetica, sans-serif;
	font-size: 12px;
}

.window
{
	position: absolute;
	left:0;
	top:0;
}

.window .imageBrowser a
{
	font-weight: normal;
	color: #666;
	text-decoration: none;
}@charset "utf-8";

.pageControls { margin-top: 10px; }
.pageControls td
{
	font-family: Verdana, Arial, Helvetica, sans-serif;
	font-size: 12px;
}
.pageControls .numbers { font-weight: bold; }
.pageControls .numbers a
{
	padding: 2px 4px;
	text-decoration: none;
}
.pageControls .numbers.current
{
	cursor: default;
	padding: 2px 4px;
}
.pageControls .arrows .active { cursor: pointer; }
.pageControls .count { padding-left: 10px; }
.pageControls .units
{
	font-family: "Courier New", Courier, monospace !important;
	font-size: 12px !important;
	padding-right: 5px;
}


@charset "utf-8";

.XMLHttpPreloadImgBorder
{
	background-color: #000;
	opacity: .5;
	filter: alpha(opacity=50);
}
.XMLHttpPreloadImg,
.XMLHttpPreloadImgBorder
{
	position: absolute;
	left: 0;
	top: 0;
	/*display: none;*/
}
.XMLHttpPreloadImg,
.XMLHttpPreloadImg td,
.XMLHttpPreloadImg a
{
	font-family: Verdana, Arial, Helvetica, sans-serif;
	font-size: 9px;
	font-weight: bold;
	color: red;
}

